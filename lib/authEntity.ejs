<% if (strict) { -%>
    "use strict";
<% } -%>

<% if (view) { -%>
    import {
        BaseEntity,
        BeforeInsert,
        Column,
        Entity,
        PrimaryGeneratedColumn,
    } from 'typeorm';
    import bcrypt from 'bcrypt';
    @Entity()
    export class Admin extends BaseEntity {
        @PrimaryGeneratedColumn()
        sid: number;
        @Column('varchar', { comment: '이메일', length: 256 })
        email: string;
        @Column('varchar', { comment: '비밀번호', length: 512 })
        pwd: string;
        @Column('varchar', { comment: '이름', length: 128 })
        username: string;
        @Column('datetime', { comment: '신청날짜' })
        sub_date: Date;
        @BeforeInsert()
        async saveEncryptedPassword() {
            this.pwd = await bcrypt.hash(this.pwd, 5);
        }
        async comparePassword(pwd: string): Promise<boolean> {
            if (!(await bcrypt.compare(pwd, this.pwd))) {
                throw 'Compare Error';
            }
            return await bcrypt.compare(pwd, this.pwd);
        }
    }
    
<% } -%>